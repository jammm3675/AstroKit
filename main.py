import logging
import os
import threading
import time
import requests
from datetime import datetime
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError, BadRequest, Conflict

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '')

COINGECKO_API = "https://api.coingecko.com/api/v3/simple/price"
CRYPTO_CURRENCIES = {
    "bitcoin": "BTC",
    "the-open-network": "TON"
}

HOROSCOPES = {
    "–û–≤–µ–Ω": "–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ DeFi-–ø—Ä–æ–µ–∫—Ç—ã. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–∑–ª–µ—Ç—ã –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.",
    "–¢–µ–ª–µ—Ü": "–î–µ—Ä–∂–∏—Ç–µ BTC, –≤–æ–∑–º–æ–∂–µ–Ω –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –º–µ–º–∫–æ–∏–Ω—ã.",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å.",
    "–†–∞–∫": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å - –Ω–µ –ø–æ–¥–¥–∞–≤–∞–π—Ç–µ—Å—å FOMO. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–≤–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.",
    "–õ–µ–≤": "–í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–µ. –ü–æ—Å–µ—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
    "–î–µ–≤–∞": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ - —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –Ω–∞ –≤—ã—Å–æ—Ç–µ. –í–æ–∑–º–æ–∂–Ω—ã –≤—ã–≥–æ–¥–Ω—ã–µ —Å–¥–µ–ª–∫–∏.",
    "–í–µ—Å—ã": "–ë–∞–ª–∞–Ω—Å - –≤–∞—à–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.",
    "–°–∫–æ—Ä–ø–∏–æ–Ω": "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
    "–°—Ç—Ä–µ–ª–µ—Ü": "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏. –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å.",
    "–ö–æ–∑–µ—Ä–æ–≥": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –≤–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–µ–π–∫–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.",
    "–í–æ–¥–æ–ª–µ–π": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –≤–∞—Å - –∏–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ L1 —Ä–µ—à–µ–Ω–∏—è. –ù–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ whitepaper –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π.",
    "–†—ã–±—ã": "–î–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏, –Ω–æ –ø–æ–¥–∫—Ä–µ–ø–ª—è–π—Ç–µ –µ–µ –¥–∞–Ω–Ω—ã–º–∏. –í–æ–∑–º–æ–∂–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –Ω–∞ DEX."
}

LEARNING_TIPS = [
    "üîí –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º",
    "üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞",
    "‚è≥ –ü–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É - HODL –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
    "üìö –ò–∑—É—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π - –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞",
    "üõ°Ô∏è –í–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ-—Å–µ—Ä–≤–∏—Å–∞—Ö",
    "üí∏ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å",
    "üå¶Ô∏è –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ —Ü–∏–∫–ª–∏—á–Ω—ã–π - –ø–æ–∫—É–ø–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–¥–∞—é—Ç",
    "üîç –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ Etherscan –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º",
    "üß© –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å—Ç–µ–π–∫–∏–Ω–≥ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏"
]

PREMIUM_OPTIONS = {
    "tomorrow": {
        "title": "üîÆ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
        "description": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥–µ—Ç –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≤—Ç—Ä–∞",
        "price": "5 TON"
    },
    "weekly": {
        "title": "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "description": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
        "price": "20 TON"
    },
    "permanent": {
        "title": "üíé –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "price": "50 TON/–º–µ—Å"
    }
}

EMERGENCY_ALERTS = [
    "‚ö†Ô∏è –ê–°–¢–†–û-–¢–†–ï–í–û–ì–ê! –ú–µ—Ä–∫—É—Ä–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π ‚Üí –û–∂–∏–¥–∞–π—Ç–µ —Å–±–æ–µ–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö",
    "üö® –Æ–ø–∏—Ç–µ—Ä –≤ –∫–≤–∞–¥—Ä–∞—Ç—É—Ä–µ —Å –°–∞—Ç—É—Ä–Ω–æ–º ‚Üí –í–æ–∑–º–æ–∂–Ω—ã —Ä–µ–∑–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ä—ã–Ω–∫–∞",
    "üåò –õ—É–Ω–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ –≤ 5 –¥–æ–º–µ ‚Üí –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤"
]

def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üåü –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫—É—Ä—Å", callback_data="today_forecast")
        ],
        [
            InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ-–æ–±—É—á–∞–ª–∫–∞", callback_data="learning_tip"),
            InlineKeyboardButton("üîÆ –ü—Ä–µ–º–∏—É–º", callback_data="premium_menu")
        ]
    ])

def back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def premium_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    buttons = [
        [InlineKeyboardButton(
            f"{opt['title']} ({opt['price']})", 
            callback_data=f"premium_{option}"
        )] for option, opt in PREMIUM_OPTIONS.items()
    ]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    chat_id = query.message.chat_id if query else update.effective_chat.id
    
    text = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroKit!*\n\n"
        "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞—Å—Ç—Ä–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é—â–∏–π –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è "
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–≤–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        if query:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=query.message.message_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

async def get_crypto_prices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        params = {
            "ids": ",".join(CRYPTO_CURRENCIES.keys()),
            "vs_currencies": "usd",
            "include_24hr_change": "true"
        }
        response = requests.get(COINGECKO_API, params=params, timeout=10)
        data = response.json()
        
        prices = {}
        for crypto_id, symbol in CRYPTO_CURRENCIES.items():
            if crypto_id in data:
                prices[symbol] = {
                    "price": data[crypto_id]["usd"],
                    "change": data[crypto_id]["usd_24h_change"]
                }
        return prices
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return None

def format_change_bar(percent_change):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    bar_length = 10
    filled = min(int(abs(percent_change) * bar_length / 10), bar_length)
    bar = "‚ñ∞" * filled + "‚ñ±" * (bar_length - filled)
    symbol = "‚ñ≤" if percent_change >= 0 else "‚ñº"
    return f"{symbol}{abs(percent_change):.1f}%", bar

async def show_today_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    header = f"üåå *–ö–†–ò–ü–¢–û–ì–û–†–û–°–ö–û–ü | {current_date}*\n\n"
    
    horoscope_text = "\n".join(
        f"‚ôà {sign}: {prediction}" 
        for sign, prediction in HOROSCOPES.items()
    )
    
    prices = await get_crypto_prices()
    market_text = "\n\nüìä *–†—ã–Ω–æ–∫:*\n"
    
    if prices:
        for symbol, data in prices.items():
            change_text, bar = format_change_bar(data["change"])
            market_text += (
                f"{symbol}: ${data['price']:,.2f} "
                f"{change_text} (24h) {bar}\n"
            )
    else:
        market_text += "–î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    
    # –°–ª—É—á–∞–π–Ω–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if datetime.now().hour % 4 == 0:  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
        emergency = EMERGENCY_ALERTS[datetime.now().minute % len(EMERGENCY_ALERTS)]
        market_text += f"\n{emergency}"
    
    full_text = header + horoscope_text + market_text
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=full_text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

async def show_learning_tip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    tip = LEARNING_TIPS[datetime.now().second % len(LEARNING_TIPS)]
    text = f"üí∞ *–ö—Ä–∏–ø—Ç–æ-—Å–æ–≤–µ—Ç –¥–Ω—è*\n\n{tip}"
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–≤–µ—Ç–∞: {e}")

async def show_premium_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üîÆ *–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø*\n\n"
        "–†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=premium_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é: {e}")

async def handle_premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, option: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if option not in PREMIUM_OPTIONS:
        return
    
    selected = PREMIUM_OPTIONS[option]
    text = (
        f"{selected['title']}\n\n"
        f"{selected['description']}\n\n"
        f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {selected['price']}\n\n"
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @CryptoAstroSupport"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–º–∏—É–º –≤—ã–±–æ—Ä–∞: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    try:
        if data == "main_menu":
            await show_main_menu(update, context)
        elif data == "today_forecast":
            await show_today_forecast(update, context)
        elif data == "learning_tip":
            await show_learning_tip(update, context)
        elif data == "premium_menu":
            await show_premium_menu(update, context)
        elif data.startswith("premium_"):
            option = data.split("_")[1]
            await handle_premium_choice(update, context, option)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def run_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "ü§ñ AstroKit Bot is running! UptimeRobot monitoring active."

    @app.route('/health')
    def health_check():
        return "OK", 200

    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            server_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:10000')
            health_url = f"{server_url}/health"
            response = requests.get(health_url, timeout=10)
            logger.info(f"Keep-alive –∑–∞–ø—Ä–æ—Å: Status {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(14 * 60)  # 14 –º–∏–Ω—É—Ç

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    server_thread = threading.Thread(target=run_flask_server)
    server_thread.daemon = True
    server_thread.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.environ.get('PORT', 10000)}")

    if os.environ.get('RENDER'):
        wakeup_thread = threading.Thread(target=keep_alive)
        wakeup_thread.daemon = True
        wakeup_thread.start()
        logger.info("üîî Keep-alive –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 14 –º–∏–Ω—É—Ç)")

    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    max_retries = 5
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES,
                poll_interval=1.5
            )
            break
        except Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    main()

import logging
import os
import threading
import time
import requests
import asyncio
import random
import json
from datetime import datetime, date, timedelta
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
from telegram.error import TelegramError, BadRequest, Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
CRYPTO_APIS = {
    "coingecko": {
        "url": "https://api.coingecko.com/api/v3/simple/price",
        "params": {
            "ids": "bitcoin,ethereum,the-open-network",
            "vs_currencies": "usd",
            "include_24hr_change": "true"
        },
        "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        }
    },
    "binance": {
        "url": "https://api.binance.com/api/v3/ticker/24hr",
        "symbols": ["BTCUSDT", "ETHUSDT", "TONUSDT"]
    },
    "cryptocompare": {
        "url": "https://min-api.cryptocompare.com/data/pricemultifull",
        "params": {
            "fsyms": "BTC,ETH,TON",
            "tsyms": "USD"
        }
    }
}

CRYPTO_IDS = {
    "btc": "bitcoin",
    "eth": "ethereum", 
    "ton": "the-open-network"
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
user_data = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
crypto_prices = {
    "btc": {"price": None, "change": None, "last_update": None, "source": None},
    "eth": {"price": None, "change": None, "last_update": None, "source": None},
    "ton": {"price": None, "change": None, "last_update": None, "source": None}
}

# –ö—ç—à –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
api_cache = {
    "last_update": None,
    "cache_duration": 300,  # 5 –º–∏–Ω—É—Ç
    "failed_attempts": 0,
    "current_source": "coingecko"
}

def save_cache_to_file():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª"""
    try:
        cache_data = {
            "crypto_prices": crypto_prices,
            "api_cache": api_cache,
            "timestamp": datetime.now().isoformat()
        }
        with open("cache.json", "w") as f:
            json.dump(cache_data, f, default=str)
        logger.info("üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def load_cache_from_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("cache.json", "r") as f:
            cache_data = json.load(f)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        global crypto_prices, api_cache
        crypto_prices = cache_data.get("crypto_prices", crypto_prices)
        api_cache = cache_data.get("api_cache", api_cache)
        
        logger.info("üìÇ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        return True
    except FileNotFoundError:
        logger.info("üìÇ –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return False

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
FALLBACK_DATA = {
    "btc": {"price": 60000, "change": 1.2, "source": "fallback"},
    "eth": {"price": 3000, "change": 0.8, "source": "fallback"},
    "ton": {"price": 7.50, "change": 2.5, "source": "fallback"}
}

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
def generate_horoscopes():
    themes = [
        "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥", "NFT", "DeFi", 
        "–º–∞–π–Ω–∏–Ω–≥", "ICO", "–±–ª–æ–∫—á–µ–π–Ω", "—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ",
        "Web3", "GameFi", "DAO", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã", "—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã"
    ]
    actions = [
        "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤", "–∏–∑–±–µ–≥–∞–π—Ç–µ", "–∏–∑—É—á–∏—Ç–µ", "–ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ", "–ø–æ–∫—É–ø–∞–π—Ç–µ",
        "—Ö–æ–ª–¥–∏—Ç–µ", "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ", "—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ", "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å",
        "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", "—É–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤", "—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –Ω–∞"
    ]
    assets = [
        "BTC", "TON", "ETH", "SOL", "DOGE", "–º–µ–º–∫–æ–∏–Ω—ã", "–∞–ª—å—Ç–∫–æ–∏–Ω—ã", "–≥–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏",
        "–Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", "L2 —Ä–µ—à–µ–Ω–∏—è", "Oracle-–ø—Ä–æ–µ–∫—Ç—ã", 
        "–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", "privacy-–º–æ–Ω–µ—Ç—ã"
    ]
    moods = [
        "—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å", "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –¥–µ–Ω—å", "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–≤—Ä–µ–º—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "–ø–µ—Ä–∏–æ–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", "–≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω", "–º–æ–º–µ–Ω—Ç –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
        "—Ñ–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Ñ–∞–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "–≤—Ä–µ–º—è –¥–ª—è —Ö–æ–¥–ª–∏–Ω–≥–∞"
    ]
    endings = [
        "—É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ", "–±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º", "–¥–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏",
        "–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–∏–∑–±–µ–≥–∞–π—Ç–µ FOMO", "—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å", "–∏—â–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫–∏", "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É", "–Ω–µ –ø–æ–¥–¥–∞–≤–∞–π—Ç–µ—Å—å –ø–∞–Ω–∏–∫–µ"
    ]
    
    horoscopes = {}
    for sign in ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", 
                 "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]:
        variants = []
        for _ in range(30):  # 30 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–Ω–∞–∫
            theme = random.choice(themes)
            action = random.choice(actions)
            asset = random.choice(assets)
            mood = random.choice(moods)
            ending = random.choice(endings)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            emoji = random.choice(["üöÄ", "üíé", "üîÆ", "üåü", "‚ú®", "üåï", "üî•", "üí°", "‚ö°"])
            
            text = (
                f"{emoji} *{sign}:*\n"
                f"–°–µ–≥–æ–¥–Ω—è *{mood}* –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–∞–∫—Ç–∏–≤–æ–≤! –ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç: "
                f"*{action} {asset}.*\n"
                f"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ *{theme}*. {ending.capitalize()}!"
            )
            variants.append(text)
        horoscopes[sign] = variants
    
    return horoscopes

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
HOROSCOPES_DB = generate_horoscopes()

# –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã)
LEARNING_TIPS = [
    "üîí –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
    "üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ (DeFi, NFT, L1, AI, Gaming)",
    "‚è≥ –ü–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è HODL —á–∞—Å—Ç–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
    "üìö –ò–∑—É—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π - –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –æ–±–µ—â–∞–Ω–∏—è",
    "üõ°Ô∏è –í–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ-—Å–µ—Ä–≤–∏—Å–∞—Ö –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å–∏–¥-—Ñ—Ä–∞–∑–∞–º–∏",
    "üí∏ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—â–µ—Ä–±–∞",
    "üå¶Ô∏è –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ —Ü–∏–∫–ª–∏—á–Ω—ã–π - –ø–æ–∫—É–ø–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–¥–∞—é—Ç, –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å, –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–∫—É–ø–∞—é—Ç",
    "üîç –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä—ã –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
    "üß© –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å—Ç–µ–π–∫–∏–Ω–≥ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "‚öñÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π",
    "üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã - –Ω–µ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ –±–µ–∑ –≤–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω",
    "üí° –û–±—É—á–∞–π—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ - –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ, –∏ –≤—á–µ—Ä–∞—à–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è",
    "üåô –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π - FOMO (Fear Of Missing Out) –∏ FUD (Fear, Uncertainty, Doubt) - –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞",
    "üîÑ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –∏ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏",
    "üîé –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤ - —á–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã, –∏–∑—É—á–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∏—â–∏—Ç–µ –∞—É–¥–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ - –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã –≤ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã",
    "üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å",
    "üíé –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å",
    "üåç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - –æ–Ω–∏ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫",
    "‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ",
    "üìâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DCA (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏) –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–∞—Ö –≤ –ø–æ–∑–∏—Ü–∏—é",
    "üîê –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–æ—Ñ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "üåê –ò–∑—É—á–∞–π—Ç–µ –æ—Å–Ω–æ–≤—ã –±–ª–æ–∫—á–µ–π–Ω–∞ - –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
    "üíº –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"
]

# –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
PREMIUM_OPTIONS = {
    "tomorrow": {
        "title": "üîÆ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
        "description": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥–µ—Ç –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≤—Ç—Ä–∞",
        "price": "2$"
    },
    "weekly": {
        "title": "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "description": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
        "price": "5$"
    },
    "permanent": {
        "title": "üíé –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "price": "7$/–º–µ—Å"
    }
}

def get_user_data(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_data:
        user_data[chat_id] = {
            "notifications": True,
            "last_horoscope_date": None,
            "horoscopes": {},
            "advice": None,
            "notification_time": "09:00"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 9:00
        }
    return user_data[chat_id]

def update_user_horoscope(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = get_user_data(chat_id)
    today = date.today()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø (–ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞)
    if user_info["last_horoscope_date"] != today:
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        user_info["last_horoscope_date"] = today
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info["advice"] = random.choice(LEARNING_TIPS)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for sign, variants in HOROSCOPES_DB.items():
            user_info["horoscopes"][sign] = random.choice(variants)
        
        logger.info(f"–ì–æ—Ä–æ—Å–∫–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ {today}")

def update_crypto_prices():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        if api_cache["last_update"] is not None and \
           (datetime.now() - api_cache["last_update"]).total_seconds() < api_cache["cache_duration"]:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_source = api_cache["current_source"]
        
        if current_source == "coingecko":
            success = _update_from_coingecko()
        elif current_source == "binance":
            success = _update_from_binance()
        elif current_source == "cryptocompare":
            success = _update_from_cryptocompare()
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ API: {current_source}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        if success:
            api_cache["last_update"] = datetime.now()
            api_cache["failed_attempts"] = 0
            logger.info(f"–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç {current_source}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            save_cache_to_file()
        else:
            api_cache["failed_attempts"] += 1
            if api_cache["failed_attempts"] >= 3:
                logger.error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                _use_fallback_data()
                save_cache_to_file()
            else:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
                _switch_api_source()
                logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {api_cache['current_source']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        _use_fallback_data()

def _update_from_coingecko():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç CoinGecko API"""
    try:
        api_config = CRYPTO_APIS["coingecko"]
        response = requests.get(
            api_config["url"], 
            params=api_config["params"], 
            headers=api_config["headers"], 
            timeout=15
        )
        
        if response.status_code == 429:
            logger.warning("CoinGecko: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            return False
            
        response.raise_for_status()
        prices = response.json()
        
        current_time = datetime.now()
        success_count = 0
        
        for symbol, coin_id in CRYPTO_IDS.items():
            if coin_id in prices:
                coin_data = prices[coin_id]
                price = coin_data.get("usd")
                change = coin_data.get("usd_24h_change")
                
                if price is not None and change is not None:
                    crypto_prices[symbol]["price"] = price
                    crypto_prices[symbol]["change"] = change
                    crypto_prices[symbol]["last_update"] = current_time
                    crypto_prices[symbol]["source"] = "coingecko"
                    success_count += 1
                    logger.info(f"–ö—É—Ä—Å {symbol.upper()}: ${price:.2f} ({change:.2f}%)")
        
        return success_count > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CoinGecko API: {e}")
        return False

def _update_from_binance():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç Binance API"""
    try:
        api_config = CRYPTO_APIS["binance"]
        current_time = datetime.now()
        success_count = 0
        
        for symbol in api_config["symbols"]:
            response = requests.get(
                f"{api_config['url']}?symbol={symbol}",
                timeout=10
            )
            
            if response.status_code == 429:
                logger.warning("Binance: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                return False
                
            response.raise_for_status()
            data = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã Binance –≤ –Ω–∞—à–∏ —Å–∏–º–≤–æ–ª—ã
            symbol_map = {"BTCUSDT": "btc", "ETHUSDT": "eth", "TONUSDT": "ton"}
            our_symbol = symbol_map.get(symbol)
            
            if our_symbol and data:
                price = float(data.get("lastPrice", 0))
                change = float(data.get("priceChangePercent", 0))
                
                if price > 0:
                    crypto_prices[our_symbol]["price"] = price
                    crypto_prices[our_symbol]["change"] = change
                    crypto_prices[our_symbol]["last_update"] = current_time
                    crypto_prices[our_symbol]["source"] = "binance"
                    success_count += 1
                    logger.info(f"–ö—É—Ä—Å {our_symbol.upper()}: ${price:.2f} ({change:.2f}%)")
        
        return success_count > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Binance API: {e}")
        return False

def _update_from_cryptocompare():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç CryptoCompare API"""
    try:
        api_config = CRYPTO_APIS["cryptocompare"]
        response = requests.get(
            api_config["url"],
            params=api_config["params"],
            timeout=15
        )
        
        if response.status_code == 429:
            logger.warning("CryptoCompare: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            return False
            
        response.raise_for_status()
        data = response.json()
        
        current_time = datetime.now()
        success_count = 0
        
        if "RAW" in data:
            raw_data = data["RAW"]
            symbol_map = {"BTC": "btc", "ETH": "eth", "TON": "ton"}
            
            for api_symbol, our_symbol in symbol_map.items():
                if api_symbol in raw_data and "USD" in raw_data[api_symbol]:
                    usd_data = raw_data[api_symbol]["USD"]
                    price = usd_data.get("PRICE", 0)
                    change = usd_data.get("CHANGEPCT24HOUR", 0)
                    
                    if price > 0:
                        crypto_prices[our_symbol]["price"] = price
                        crypto_prices[our_symbol]["change"] = change
                        crypto_prices[our_symbol]["last_update"] = current_time
                        crypto_prices[our_symbol]["source"] = "cryptocompare"
                        success_count += 1
                        logger.info(f"–ö—É—Ä—Å {our_symbol.upper()}: ${price:.2f} ({change:.2f}%)")
        
        return success_count > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CryptoCompare API: {e}")
        return False

def _switch_api_source():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ API"""
    sources = ["coingecko", "binance", "cryptocompare"]
    current = api_cache["current_source"]
    
    try:
        current_index = sources.index(current)
        next_index = (current_index + 1) % len(sources)
        api_cache["current_source"] = sources[next_index]
    except ValueError:
        api_cache["current_source"] = "coingecko"

def _use_fallback_data():
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    current_time = datetime.now()
    for symbol, data in FALLBACK_DATA.items():
        crypto_prices[symbol]["price"] = data["price"]
        crypto_prices[symbol]["change"] = data["change"]
        crypto_prices[symbol]["last_update"] = current_time
        crypto_prices[symbol]["source"] = data["source"]
    logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤")

def format_change_bar(percent_change):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    if percent_change is None:
        return "N/A", ""
    
    bar_length = 10
    filled = min(int(abs(percent_change) * bar_length / 10), bar_length)
    bar = "‚ñ∞" * filled + "‚ñ±" * (bar_length - filled)
    symbol = "‚ñ≤" if percent_change >= 0 else "‚ñº"
    color = "üü¢" if percent_change >= 0 else "üî¥"
    return f"{color} {symbol}{abs(percent_change):.1f}%", bar

def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope_menu")
        ],
        [
            InlineKeyboardButton("üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="learning_tip"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
        ],
        [
            InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º", callback_data="premium_menu")
        ]
    ])

def back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def zodiac_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ (4x3)"""
    zodiacs = list(HOROSCOPES_DB.keys())
    buttons = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(zodiacs), 3):
        row = zodiacs[i:i+3]
        buttons.append([
            InlineKeyboardButton(zod, callback_data=f"zodiac_{zod}") 
            for zod in row
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(buttons)

def settings_keyboard(chat_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_info = get_user_data(chat_id)
    notifications_on = user_info.get("notifications", True)
    
    toggle_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_on else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(toggle_text, callback_data="toggle_notifications")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def premium_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    buttons = [
        [InlineKeyboardButton(
            f"{opt['title']} ({opt['price']})", 
            callback_data=f"premium_{option}"
        )] for option, opt in PREMIUM_OPTIONS.items()
    ]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_data(chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_horoscope(chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    update_crypto_prices()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroKit, {user.first_name}!* ‚ú®\n\n"
        "üåü –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–∞—Å—Ç—Ä–æ–ª–æ–≥!\n"
        "üìÖ –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–≤–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –º–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://example.com/tos)."
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    
    # –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
    user_info = get_user_data(chat_id)
    if user_info["notifications"] and context.job_queue:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        schedule_user_notifications(context.job_queue, chat_id, user_info["notification_time"])
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

def schedule_user_notifications(job_queue, chat_id, notification_time):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
        hour, minute = map(int, notification_time.split(":"))
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_jobs = job_queue.get_jobs_by_name(f"notification_{chat_id}")
        for job in current_jobs:
            job.schedule_removal()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        job_queue.run_daily(
            send_notification,
            time=time(hour, minute),
            chat_id=chat_id,
            name=f"notification_{chat_id}"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {chat_id} –Ω–∞ {notification_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {chat_id}: {e}")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    chat_id = query.message.chat_id if query else update.effective_chat.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_horoscope(chat_id)
    update_crypto_prices()
    
    text = (
        "‚ú® *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        if query:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=query.message.message_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

async def show_horoscope_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = query.message.chat_id
    update_user_horoscope(chat_id)
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text="‚ôà *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:*",
            reply_markup=zodiac_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")

async def show_zodiac_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE, zodiac: str) -> None:
    """–ü–æ–∫–∞–∑ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_horoscope(chat_id)
    update_crypto_prices()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user_data(chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_text = "\n\nüìä *–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n"
    
    for symbol in CRYPTO_IDS:
        price_data = crypto_prices[symbol]
        if price_data["price"] is not None and price_data["change"] is not None:
            change_text, bar = format_change_bar(price_data["change"])
            last_update = price_data["last_update"].strftime("%H:%M") if price_data["last_update"] else "N/A"
            source = price_data.get("source", "unknown")
            source_emoji = {"coingecko": "ü¶é", "binance": "üìä", "cryptocompare": "üîÑ", "fallback": "üõ°Ô∏è"}.get(source, "‚ùì")
            market_text += f"{symbol.upper()}: ${price_data['price']:,.2f} {change_text} (24h)\n{bar}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update} {source_emoji}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    text = (
        f"‚ú® *{zodiac} | {current_date}*\n\n"
        f"{user_info['horoscopes'].get(zodiac, '–ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{market_text}"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")

async def show_learning_tip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_horoscope(chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user_data(chat_id)
    
    text = f"üí° *–°–æ–≤–µ—Ç –¥–Ω—è*\n\nüåü {user_info['advice']}"
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–≤–µ—Ç–∞: {e}")

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user_data(chat_id)
    notifications_status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if user_info.get("notifications", True) else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        f"üîî –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {notifications_status}\n"
        f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_info.get('notification_time', '09:00')}\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞—Å—Ç—Ä–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏:"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=settings_keyboard(chat_id),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user_data(chat_id)
    new_status = not user_info.get("notifications", True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_info["notifications"] = new_status
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    if new_status and context.job_queue:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        schedule_user_notifications(context.job_queue, chat_id, user_info["notification_time"])
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è {chat_id}")
    elif not new_status and context.job_queue:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        current_jobs = context.job_queue.get_jobs_by_name(f"notification_{chat_id}")
        for job in current_jobs:
            job.schedule_removal()
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {chat_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await show_settings_menu(update, context)

async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"""
    job = context.job
    chat_id = job.chat_id
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alerts = [
        "‚ö†Ô∏è *–ê–°–¢–†–û-–¢–†–ï–í–û–ì–ê!*\n\n–ú–µ—Ä–∫—É—Ä–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π ‚Üí –û–∂–∏–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö –∏ –∫–æ—à–µ–ª—å–∫–∞—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!",
        "üåü *–ó–í–ï–ó–î–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!*\n\n–Æ–ø–∏—Ç–µ—Ä –≤—Ö–æ–¥–∏—Ç –≤ –∑–Ω–∞–∫ –°—Ç—Ä–µ–ª—å—Ü–∞ ‚Üí –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!",
        "üîÆ *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!*\n\n–õ—É–Ω–∞ –≤ –°–∫–æ—Ä–ø–∏–æ–Ω–µ ‚Üí –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –ø–ª–µ—á–æ–º.",
        "üí´ *–ê–°–¢–†–û-–ü–†–û–ì–ù–û–ó!*\n\n–í–µ–Ω–µ—Ä–∞ —Å–±–ª–∏–∂–∞–µ—Ç—Å—è —Å –°–∞—Ç—É—Ä–Ω–æ–º ‚Üí –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è!",
        "üåï *–û–°–û–ë–´–ô –ü–ï–†–ò–û–î!*\n\n–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –í–æ–¥–æ–ª–µ–µ ‚Üí –û–∂–∏–¥–∞–π—Ç–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–æ–∑–º–æ–∂–Ω—ã–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º.",
        "üåå *–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –°–û–í–ï–¢!*\n\n–ú–∞—Ä—Å –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –£—Ä–∞–Ω–æ–º ‚Üí –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!",
        "ü™ê *–ü–õ–ê–ù–ï–¢–ê–†–ù–´–ô –ü–†–û–ì–ù–û–ó!*\n\n–ù–µ–ø—Ç—É–Ω –≤ —Ç—Ä–∏–Ω–µ —Å –ü–ª—É—Ç–æ–Ω–æ–º ‚Üí –û—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ö–µ–º –Ω–∞ —Ä—ã–Ω–∫–µ!"
    ]
    
    alert = random.choice(alerts)
    
    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=alert,
            parse_mode="Markdown"
        )
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await context.bot.delete_message(
            chat_id=chat_id,
            message_id=message.message_id
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def show_premium_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üíé *–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø*\n\n"
        "–†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
        "‚Ä¢ üîÆ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ üíº –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=premium_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é: {e}")

async def handle_premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, option: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if option not in PREMIUM_OPTIONS:
        return
    
    selected = PREMIUM_OPTIONS[option]
    text = (
        f"‚ú® *{selected['title']}* ‚ú®\n\n"
        f"üìù {selected['description']}\n\n"
        f"üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {selected['price']}\n\n"
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @CryptoAstroSupport"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–º–∏—É–º –≤—ã–±–æ—Ä–∞: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    try:
        if data == "main_menu":
            await show_main_menu(update, context)
        elif data == "horoscope_menu":
            await show_horoscope_menu(update, context)
        elif data.startswith("zodiac_"):
            zodiac = data[7:]
            await show_zodiac_horoscope(update, context, zodiac)
        elif data == "learning_tip":
            await show_learning_tip(update, context)
        elif data == "settings_menu":
            await show_settings_menu(update, context)
        elif data == "toggle_notifications":
            await toggle_notifications(update, context)
        elif data == "premium_menu":
            await show_premium_menu(update, context)
        elif data.startswith("premium_"):
            option = data.split("_")[1]
            await handle_premium_choice(update, context, option)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def run_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "ü§ñ AstroKit Bot is running! UptimeRobot monitoring active."

    @app.route('/health')
    def health_check():
        return "OK", 200

    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port, threaded=True)

def keep_alive():
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞
            server_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:10000')
            health_url = f"{server_url}/health"
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = requests.get(health_url, timeout=15)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Keep-alive —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            else:
                logger.warning(f"‚ö†Ô∏è Keep-alive: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except requests.exceptions.Timeout:
            logger.warning("‚è∞ Keep-alive: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        except requests.exceptions.ConnectionError:
            logger.error("üîå Keep-alive: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå Keep-alive –æ—à–∏–±–∫–∞: {e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 14 –º–∏–Ω—É—Ç –¥–ª—è Render
        time.sleep(14 * 60)  # 14 –º–∏–Ω—É—Ç

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Render"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AstroKit Bot...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞...")
    cache_loaded = load_cache_from_file()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    if not cache_loaded:
        update_crypto_prices()
    else:
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=run_flask_server, name="FlaskServer")
    server_thread.daemon = True
    server_thread.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.environ.get('PORT', 10000)}")

    # Keep-alive –¥–ª—è Render (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Render)
    is_render = os.environ.get('RENDER') or os.environ.get('RENDER_EXTERNAL_URL')
    if is_render:
        wakeup_thread = threading.Thread(target=keep_alive, name="KeepAlive")
        wakeup_thread.daemon = True
        wakeup_thread.start()
        logger.info("üîî Keep-alive –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 14 –º–∏–Ω—É—Ç)")
    else:
        logger.info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - keep-alive –æ—Ç–∫–ª—é—á–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å JobQueue
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    if application.job_queue:
        application.job_queue.run_repeating(
            lambda context: update_crypto_prices(),
            interval=300,  # 5 –º–∏–Ω—É—Ç
            name="crypto_update"
        )
        logger.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        
        # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        application.job_queue.run_repeating(
            lambda context: save_cache_to_file(),
            interval=600,  # 10 –º–∏–Ω—É—Ç
            name="cache_save"
        )
        logger.info("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    max_retries = 5
    retry_delay = 30  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Render
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ {attempt+1}/{max_retries}")
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES,
                poll_interval=2.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                close_loop=False,
                timeout=30
            )
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            break
        except Conflict as e:
            logger.error(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                retry_delay = min(retry_delay * 2, 300)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–æ–º 5 –º–∏–Ω—É—Ç
            else:
                logger.error("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if attempt < max_retries - 1:
                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
            break

if __name__ == "__main__":
    main()

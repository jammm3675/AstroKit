import logging
import os
import threading
import time
import requests
import asyncio
import random
from datetime import datetime, date
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
from telegram.error import TelegramError, BadRequest, Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN', '')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON
STONFI_API = "https://api.ston.fi/v1/tokens"
TON_TOKEN_ADDRESS = "EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kC5Rv0o7iQu8PpON"  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å TON –≤ mainnet

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
daily_data = {
    "date": None,
    "advice": None,
    "horoscopes": {},
    "ton_price": None,
    "ton_change": None
}

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (300+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
def generate_horoscopes():
    themes = [
        "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Ç—Ä–µ–π–¥–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥", "NFT", "DeFi", 
        "–º–∞–π–Ω–∏–Ω–≥", "ICO", "–±–ª–æ–∫—á–µ–π–Ω", "—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ"
    ]
    actions = [
        "–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤", "–∏–∑–±–µ–≥–∞–π—Ç–µ", "–∏–∑—É—á–∏—Ç–µ", "–ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ", "–ø–æ–∫—É–ø–∞–π—Ç–µ",
        "—Ö–æ–ª–¥–∏—Ç–µ", "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ", "—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ", "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å"
    ]
    assets = [
        "BTC", "TON", "ETH", "SOL", "DOGE", "–º–µ–º–∫–æ–∏–Ω—ã", "–∞–ª—å—Ç–∫–æ–∏–Ω—ã", "–≥–æ–ª—É–±—ã–µ —Ñ–∏—à–∫–∏",
        "–Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"
    ]
    moods = [
        "—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å", "–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –¥–µ–Ω—å", "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–≤—Ä–µ–º—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "–ø–µ—Ä–∏–æ–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", "–≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω", "–º–æ–º–µ–Ω—Ç –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π"
    ]
    endings = [
        "—É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ", "–±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º", "–¥–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏",
        "–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–∏–∑–±–µ–≥–∞–π—Ç–µ FOMO", "—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å", "–∏—â–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
    ]
    
    horoscopes = {}
    for sign in ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", 
                 "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]:
        variants = []
        for _ in range(25):  # 25 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–Ω–∞–∫ = 300 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            theme = random.choice(themes)
            action = random.choice(actions)
            asset = random.choice(assets)
            mood = random.choice(moods)
            ending = random.choice(endings)
            
            text = (
                f"‚ôà {sign}:\n"
                f"–°–µ–≥–æ–¥–Ω—è {mood} –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–∞–∫—Ç–∏–≤–æ–≤! –ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç {action} {asset}. "
                f"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ {theme}. {ending.capitalize()}!"
            )
            variants.append(text)
        horoscopes[sign] = variants
    
    return horoscopes

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
HOROSCOPES_DB = generate_horoscopes()

# –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
LEARNING_TIPS = [
    "üîí –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
    "üåê –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ (DeFi, NFT, L1, AI, Gaming)",
    "‚è≥ –ü–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è HODL —á–∞—Å—Ç–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
    "üìö –ò–∑—É—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–µ–π - –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –æ–±–µ—â–∞–Ω–∏—è",
    "üõ°Ô∏è –í–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ-—Å–µ—Ä–≤–∏—Å–∞—Ö –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å–∏–¥-—Ñ—Ä–∞–∑–∞–º–∏",
    "üí∏ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—â–µ—Ä–±–∞",
    "üå¶Ô∏è –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ —Ü–∏–∫–ª–∏—á–Ω—ã–π - –ø–æ–∫—É–ø–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–¥–∞—é—Ç, –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å, –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–∫—É–ø–∞—é—Ç",
    "üîç –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä—ã –ø–µ—Ä–µ–¥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
    "üß© –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å—Ç–µ–π–∫–∏–Ω–≥ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "‚öñÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π",
    "üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã - –Ω–µ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ –±–µ–∑ –≤–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω",
    "üí° –û–±—É—á–∞–π—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ - –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ, –∏ –≤—á–µ—Ä–∞—à–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è",
    "üåô –ò–∑–±–µ–≥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π - FOMO (Fear Of Missing Out) –∏ FUD (Fear, Uncertainty, Doubt) - –≥–ª–∞–≤–Ω—ã–µ –≤—Ä–∞–≥–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞",
    "üîÑ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å —Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –∏ —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏",
    "üîé –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤ - —á–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã, –∏–∑—É—á–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∏—â–∏—Ç–µ –∞—É–¥–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ - –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã –≤ –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã",
    "üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å",
    "üíé –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å",
    "üåç –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ - –æ–Ω–∏ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫",
    "‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ"
]

# –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
PREMIUM_OPTIONS = {
    "tomorrow": {
        "title": "üîÆ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
        "description": "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥–µ—Ç –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≤—Ç—Ä–∞",
        "price": "5 TON"
    },
    "weekly": {
        "title": "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "description": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é",
        "price": "20 TON"
    },
    "permanent": {
        "title": "üíé –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "price": "50 TON/–º–µ—Å"
    }
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_settings = {}

def main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope_menu")
        ],
        [
            InlineKeyboardButton("üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="learning_tip"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
        ],
        [
            InlineKeyboardButton("üîÆ –ü—Ä–µ–º–∏—É–º", callback_data="premium_menu")
        ]
    ])

def back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def zodiac_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ (4x3)"""
    zodiacs = list(HOROSCOPES_DB.keys())
    buttons = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(zodiacs), 3):
        row = zodiacs[i:i+3]
        buttons.append([
            InlineKeyboardButton(zod, callback_data=f"zodiac_{zod}") 
            for zod in row
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(buttons)

def settings_keyboard(chat_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_on = user_settings.get(chat_id, {}).get("notifications", True)
    
    toggle_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_on else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(toggle_text, callback_data="toggle_notifications")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def premium_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    buttons = [
        [InlineKeyboardButton(
            f"{opt['title']} ({opt['price']})", 
            callback_data=f"premium_{option}"
        )] for option, opt in PREMIUM_OPTIONS.items()
    ]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(buttons)

def update_daily_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã"""
    today = date.today()
    
    if daily_data["date"] != today:
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        daily_data["date"] = today
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è (—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–µ–Ω—å)
        daily_data["advice"] = random.choice(LEARNING_TIPS)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞–∫–∞ (—Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –¥–µ–Ω—å)
        for sign, variants in HOROSCOPES_DB.items():
            daily_data["horoscopes"][sign] = random.choice(variants)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å TON
        update_ton_price()
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {today}")

def update_ton_price():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å TON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        response = requests.get(STONFI_API, timeout=10)
        response.raise_for_status()
        tokens = response.json().get("tokens", [])
        
        # –ò—â–µ–º TON –ø–æ –∞–¥—Ä–µ—Å—É
        ton_token = next((t for t in tokens if t.get("address") == TON_TOKEN_ADDRESS), None)
        
        if ton_token:
            # –¶–µ–Ω–∞ –≤ USD
            price_usd = float(ton_token.get("price", {}).get("usd", 0))
            change_24h = float(ton_token.get("price", {}).get("change_24h", 0))
            daily_data["ton_price"] = price_usd
            daily_data["ton_change"] = change_24h
            logger.info(f"–ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω: ${price_usd:.2f} ({change_24h:.2f}%)")
        else:
            logger.warning("TON token not found in response")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã TON: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if daily_data["ton_price"] is None:
            daily_data["ton_price"] = 7.50
            daily_data["ton_change"] = 1.5

def format_change_bar(percent_change):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    if percent_change is None:
        return "N/A", ""
    
    bar_length = 10
    filled = min(int(abs(percent_change) * bar_length / 10), bar_length)
    bar = "‚ñ∞" * filled + "‚ñ±" * (bar_length - filled)
    symbol = "‚ñ≤" if percent_change >= 0 else "‚ñº"
    return f"{symbol}{abs(percent_change):.1f}%", bar

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_settings:
        user_settings[chat_id] = {"notifications": True}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_daily_data()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroKit, {user.first_name}!*\n\n"
        "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–∞—Å—Ç—Ä–æ–ª–æ–≥!\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–≤–µ–∑–¥–Ω—ã—Ö –∫–∞—Ä—Ç –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –º–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://example.com/tos)."
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    
    # –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
    if user_settings[chat_id]["notifications"]:
        context.job_queue.run_repeating(
            send_notification,
            interval=10800,  # 3 —á–∞—Å–∞
            first=10,
            chat_id=chat_id,
            name=str(chat_id)
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    chat_id = query.message.chat_id if query else update.effective_chat.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_daily_data()
    
    text = (
        "‚ú® *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        if query:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=query.message.message_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=main_menu_keyboard(),
                parse_mode="Markdown"
            )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

async def show_horoscope_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_daily_data()
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text="‚ôà *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:*",
            reply_markup=zodiac_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")

async def show_zodiac_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE, zodiac: str) -> None:
    """–ü–æ–∫–∞–∑ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_daily_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_text = "\n\nüìä *–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n"
    
    if daily_data["ton_price"] is not None and daily_data["ton_change"] is not None:
        change_text, bar = format_change_bar(daily_data["ton_change"])
        market_text += f"TON: ${daily_data['ton_price']:,.2f} {change_text} (24h) {bar}\n"
    else:
        market_text += "–î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    text = (
        f"‚ôà *{zodiac} | {current_date}*\n\n"
        f"{daily_data['horoscopes'].get(zodiac, '–ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}\n"
        f"{market_text}"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")

async def show_learning_tip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –æ–±—É—á–∞—é—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_daily_data()
    
    text = f"üí° *–°–æ–≤–µ—Ç –¥–Ω—è*\n\n{daily_data['advice']}"
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–≤–µ—Ç–∞: {e}")

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Å—Ç—Ä–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏"
    
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=settings_keyboard(chat_id),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = user_settings.get(chat_id, {"notifications": True})
    new_status = not settings["notifications"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings[chat_id] = {"notifications": new_status}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    if new_status:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_repeating(
            send_notification,
            interval=10800,  # 3 —á–∞—Å–∞
            first=10,
            chat_id=chat_id,
            name=str(chat_id))
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è {chat_id}")
    else:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
        for job in current_jobs:
            job.schedule_removal()
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è {chat_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await show_settings_menu(update, context)

async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"""
    job = context.job
    chat_id = job.chat_id
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert = (
        "‚ö†Ô∏è *–ê–°–¢–†–û-–¢–†–ï–í–û–ì–ê!*\n\n"
        "–ú–µ—Ä–∫—É—Ä–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π ‚Üí –û–∂–∏–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö –∏ –∫–æ—à–µ–ª—å–∫–∞—Ö. "
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!"
    )
    
    try:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=alert,
            parse_mode="Markdown"
        )
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await context.bot.delete_message(
            chat_id=chat_id,
            message_id=message.message_id
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def show_premium_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üîÆ *–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø*\n\n"
        "–†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=premium_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é: {e}")

async def handle_premium_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, option: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–º–∏—É–º –æ–ø—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if option not in PREMIUM_OPTIONS:
        return
    
    selected = PREMIUM_OPTIONS[option]
    text = (
        f"{selected['title']}\n\n"
        f"{selected['description']}\n\n"
        f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {selected['price']}\n\n"
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @CryptoAstroSupport"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–º–∏—É–º –≤—ã–±–æ—Ä–∞: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    
    try:
        if data == "main_menu":
            await show_main_menu(update, context)
        elif data == "horoscope_menu":
            await show_horoscope_menu(update, context)
        elif data.startswith("zodiac_"):
            zodiac = data[7:]
            await show_zodiac_horoscope(update, context, zodiac)
        elif data == "learning_tip":
            await show_learning_tip(update, context)
        elif data == "settings_menu":
            await show_settings_menu(update, context)
        elif data == "toggle_notifications":
            await toggle_notifications(update, context)
        elif data == "premium_menu":
            await show_premium_menu(update, context)
        elif data.startswith("premium_"):
            option = data.split("_")[1]
            await handle_premium_choice(update, context, option)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def run_flask_server():
    """–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "ü§ñ AstroKit Bot is running! UptimeRobot monitoring active."

    @app.route('/health')
    def health_check():
        return "OK", 200

    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            server_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:10000')
            health_url = f"{server_url}/health"
            response = requests.get(health_url, timeout=10)
            logger.info(f"Keep-alive –∑–∞–ø—Ä–æ—Å: Status {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(14 * 60)  # 14 –º–∏–Ω—É—Ç

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    update_daily_data()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=run_flask_server)
    server_thread.daemon = True
    server_thread.start()
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.environ.get('PORT', 10000)}")

    # Keep-alive –¥–ª—è Render
    if os.environ.get('RENDER'):
        wakeup_thread = threading.Thread(target=keep_alive)
        wakeup_thread.daemon = True
        wakeup_thread.start()
        logger.info("üîî Keep-alive –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 14 –º–∏–Ω—É—Ç)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å JobQueue
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    max_retries = 5
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES,
                poll_interval=1.5
            )
            break
        except Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    main()
